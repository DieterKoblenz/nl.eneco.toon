var request = require("request");
var querystring = require("querystring");
var btoa = require("btoa");
var https = require("https");

/**
 * Toon constructor, provide the API key and secret
 * @param key Toon API key string
 * @param secret Toon API secret string
 * @constructor
 */
function Toon(key, secret) {

	// Store key and secret for authorization later on
	this.key = key;
	this.secret = secret;

	// Create fields for the access tokens
	this.access_token = null;
	this.refresh_token = null;

	// Refresh access tokens every 20 minutes
	var self = this;
	setInterval(function () {

		// If once manually authorized
		if (self.refresh_token != null) {

			// Fetch new tokens
			self.refreshAccessToken();
		}
	}, 20 * 60 * 1000);
};

/**
 * Queries the Toon API for the display status
 * @param callback Returns with two parameters, err and data
 */
Toon.prototype.getStatus = function (callback) {
	this.baseGET("status", function (err, result) {
		if (!err && result) {
			if (callback) callback(err, result.thermostatInfo);
		}
		else {
			if (callback) callback(err, false);
		}
	})
};

/**
 * PUTs to the Toon API to set a new target temperature
 * @param data Object holding a temperature attribute of type integer
 * @param callback Returns with two parameters, err and success
 */
Toon.prototype.setTemperature = function (data, callback) {
	this.basePUT("temperature", {"value": data.temperature}, function (err, result) {
		if (callback) callback(err, result)
	})
};

/**
 * Queries the Toon API for the temperature programs
 * @param callback Returns with two parameters, err and data
 */
Toon.prototype.getTemperaturePrograms = function (callback) {
	this.baseGET("temperature/programs", function (err, result) {
		if (callback) callback(err, result)
	})
};

/**
 * Queries the Toon API for the target temperature
 * @param callback Returns with two parameters, err and target_temperature
 * TODO refactor once GET temperature is implemented in Toon API
 */
Toon.prototype.getTargetTemperature = function (callback) {
	this.baseGET("status", function (err, result) {
		if (!err && result && result.thermostatInfo && result.thermostatInfo.currentSetpoint) {
			if (callback) callback(err, result.thermostatInfo.currentSetpoint);
		}
		else {
			if (callback) callback(true, null);
		}
	});
};

/**
 * Queries the Toon API for the measured temperature
 * @param callback Returns with two parameters, err and measured_temperature
 * TODO refactor once GET temperature is implemented in Toon API
 */
Toon.prototype.getMeasureTemperature = function (callback) {
	this.baseGET("status", function (err, result) {
		if (!err && result && result.thermostatInfo && result.thermostatInfo.currentTemp) {
			if (callback) callback(err, result.thermostatInfo.currentTemp);
		}
		else {
			if (callback) callback(true, null);
		}
	});
};

/**
 * Fetches all agreements from the API, if there are more
 * than one, the user may choose one
 * @param callback
 */
Toon.prototype.getAgreements = function (callback) {
	var self = this;
	this.baseGET("agreements", function (err, result) {
		self.recentAgreements = result;
		if (callback) callback(err, result);
	});
};

/**
 * Selects an agreement (device?) and registers it to this
 * toon object, this is a connection to the device
 * @param agreementId
 * @param callback
 */
Toon.prototype.setAgreement = function (agreementId, callback) {

	// Either use parameter agreement
	var agreement;
	if (agreementId != null) {
		agreement = {
			agreementId: agreementId
		};
	}
	else {
		// Or use the most recent agreement
		agreement = this.recentAgreements[0];
	}

	// Make the request to set agreement
	this.basePOST("agreements", agreement, function (err, result) {
		if (callback) callback(err, result);
	});
};

/**
 * Fetches an access token from the Toon API using the
 * athom callback service (redirect uri)
 * @param code
 * @param redirect_uri
 * @param callback
 */
Toon.prototype.getAccessToken = function (code, redirect_uri, callback) {
	var key = this.key;
	var secret = this.secret;

	// Request access_token
	var self = this;
	request.post({
		url: "https://api.toonapi.com/token",
		rejectUnauthorized: false,
		form: {
			"grant_type": "authorization_code",
			"client_id": key,
			"client_secret": secret,
			"redirect_uri": redirect_uri,
			"code": code
		}
	}, function (err, res, body) {

		// Store new tokens
		self.access_token = JSON.parse(body).access_token;
		self.refresh_token = JSON.parse(body).refresh_token;

		// Callback new tokens
		callback(err, {access_token: JSON.parse(body).access_token, refresh_token: JSON.parse(body).refresh_token});
	});
};

/**
 * Uses the refresh token to fetch a new access token,
 * stores all new tokens internally
 * @param callback
 */
Toon.prototype.refreshAccessToken = function (callback) {
	var key = this.key;
	var secret = this.secret;
	var refresh_token = this.refresh_token;

	// Refresh access_token
	var self = this;
	request.post({
		url: "https://api.toonapi.com/token",
		rejectUnauthorized: false,
		form: {
			"grant_type": "refresh_token",
			"client_id": key,
			"client_secret": secret,
			"refresh_token": refresh_token
		}
	}, function (err, res, body) {

		// Store new tokens
		self.access_token = JSON.parse(body).access_token;
		self.refresh_token = JSON.parse(body).refresh_token;

		// Callback new tokens
		callback(err, {access_token: JSON.parse(body).access_token, refresh_token: JSON.parse(body).refresh_token});
	});
};

/**
 * Convenience method that provides a basic PUT
 * to the Toon API
 * @param command Desired command to be PUT
 * @param body Data to be updated
 * @param callback Returns with two parameters, err and success
 */
Toon.prototype.basePUT = function (command, body, callback) {
	// Configure the request
	var options = {
		url: 'https://api.toonapi.com/toon/api/v1/' + command,
		method: 'PUT',
		"rejectUnauthorized": false,
		headers: {
			"authorization": "Bearer " + this.access_token,
			"Accept": "application/json"
		},
		json: body
	};

	// Perform the request
	performRequest(options, callback);
};

/**
 * Convenience method that provides a basic GET
 * to the Toon API
 * @param command Desired command to be GET
 * @param callback Returns with two parameters, err and success
 */
Toon.prototype.baseGET = function (command, callback) {

	// Configure the request
	var options = {
		url: 'https://api.toonapi.com/toon/api/v1/' + command,
		method: 'GET',
		"rejectUnauthorized": false,
		headers: {
			"Authorization": "Bearer " + this.access_token,
			"Accept": "application/json"
		}
	};

	// Perform the request
	performRequest(options, callback);
};

/**
 * Convenience method that provides a basic GET
 * to the Toon API
 * @param command Desired command to be GET
 * @param callback Returns with two parameters, err and success
 */
Toon.prototype.basePOST = function (command, data, callback) {

	// Perform request
	request({
		url: 'https://api.toonapi.com/toon/api/v1/' + command,
		method: "POST",
		headers: {
			"Authorization": "Bearer " + this.access_token,
			"Content-Type": "application/json"
		},
		json: data
	}, function (err, result) {
		if (callback) callback(err, result);
	});
};

/**
 * Convenience method that perfoms a request to
 * the Toon api, using the options provided in the
 * parameter options
 * @param options Request options
 * @param callback Returns with two parameters, err and result
 */
function performRequest(options, callback) {
	// Start the request
	request(options, function (error, response, body) {
		if (!error && response.statusCode == 200) {
			var result = (body) ? JSON.parse(body) : true;
			if (callback) callback(error, result);
		}
		else {
			if (callback) callback((error || response.statusCode), response);
		}
	});
}

module.exports = Toon;
