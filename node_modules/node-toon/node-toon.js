'use strict';

const request = require('request');
const EventEmitter = require('events').EventEmitter

const apiBaseUrl = 'https://api.toonapi.com/toon/api/v1/';

class Toon extends EventEmitter {

	/**
	 * Toon constructor, provide the API key and secret
	 * @constructor
	 */
	constructor(key, secret, url) {
		super();

		// Store key and secret for authorization later on
		this.key = key;
		this.secret = secret;
		this.webhookUrl = url;

		// Defaults
		this.targetTemperature = undefined;
		this.measureTemperature = undefined;

		// Create fields for the access tokens
		this.accessToken = new Buffer(`${this.key}:${this.secret}`).toString('base64');
		this.refreshToken = null;
	}

	/**
	 * Queries the Toon API for the display status
	 * @param callback Returns with two parameters, err and data
	 */
	getStatus(callback) {

		console.log('node-toon: get status');

		this._baseGET('status', (err, result) => {
			if (!err && result) {
				if (result && result.thermostatInfo) {

					// Store updated values
					this.measureTemperature = Math.round((result.thermostatInfo.currentTemp / 100) * 10) / 10 || this.measureTemperature;
					this.targetTemperature = Math.round((result.thermostatInfo.currentSetpoint / 100) * 10) / 10 || this.targetTemperature;

					console.log('node-toon: fetched and stored new status');

					if (typeof this.targetTemperature === 'undefined') this.emit('initialized', this);
				}

				if (callback) callback(err, result.thermostatInfo);
			} else {

				console.log('node-toon: no new data available');

				if (callback) callback(err, false);
			}
		});
	}

	/**
	 * PUTs to the Toon API to set a new target temperature
	 * @param data Object holding a temperature attribute of type integer
	 * @param callback Returns with two parameters, err and success
	 */
	setTargetTemperature(temperature, callback) {

		if (temperature) temperature = temperature * 100;

		console.log(`node-toon: set target temperature to ${temperature}`);

		this._basePUT('temperature', { value: temperature, scale: 'CELSIUS' }, (err, result) => {

			if (result) console.log(`node-toon: success setting temperature to ${temperature}`);
			if (err) console.log(`node-toon: failed to set temperature to ${temperature}`);

			if (callback) callback(err, result);
		});
	}

	/**
	 * Returns current target temperature
	 */
	getTargetTemperature(callback) {
		callback(null, this.targetTemperature);
	}

	/**
	 * Returns current measured temperature
	 */
	getMeasureTemperature(callback) {
		callback(null, this.measureTemperature);
	}

	/**
	 * Queries the Toon API for the temperature programs
	 * @param callback Returns with two parameters, err and data
	 */
	getTemperaturePrograms(callback) {
		this._baseGET('temperature/programs', (err, result) => {
			if (callback) callback(err, result);
		});
	}

	/**
	 * Queries the Toon API for the temperature programs
	 * @param callback Returns with two parameters, err and data
	 */
	getConsumptionElectricity(callback) {
		this._baseGET('consumption/electricity/data*', (err, result) => {
			if (callback) callback(err, result);
		});
	}

	/**
	 * Queries the Toon API for the temperature programs
	 * @param callback Returns with two parameters, err and data
	 */
	getConsumptionGas(callback) {
		this._baseGET('consumption/gas/data*', (err, result) => {
			if (callback) callback(err, result);
		});
	}

	/**
	 * Fetches all agreements from the API, if there are more
	 * than one, the user may choose one
	 * @param callback
	 */
	getAgreements(callback, stop) {

		console.log(`node-toon: get agreements`);

		this._baseGET('agreements', (err, agreements) => {
			if (!err && agreements) {

				console.log(`node-toon: got ${agreements.length} agreements`);

				this.recentAgreements = agreements;

				if (callback) callback(err, agreements);
			} else {

				// Check if allowed to retry
				if (!stop) {

					// Refresh access tokens
					this.refreshAccessToken(() => {

						// Try fetching agreements again
						this.getAgreements(callback, true);
					});
				} else {
					console.error(err, 'node-toon: failed to get agreements');
				}
			}
		});
	}

	/**
	 * Selects an agreement (device?) and registers it to this
	 * toon object, this is a connection to the device
	 * @param agreementId
	 * @param callback
	 */
	setAgreement(agreementId, callback) {

		// Either use parameter agreement
		let agreement;
		if (agreementId != null) {
			agreement = {
				agreementId: agreementId,
			};
		} else {
			// Or use the most recent agreement
			agreement = this.recentAgreements[0];
		}

		console.log('node-toon: set agreement');

		// Make the request to set agreement
		this._basePOST('agreements', agreement, (err, result) => {

			if (result) console.log('node-toon: successful post of agreement');
			if (err) console.log('node-toon: failed to post agreement');

			// Subscribe to events from toon
			this.registerPushEvent();

			// Check for updated target temperature
			this.getStatus(() => {

				// Agreements done
				if (callback) callback(err, result);
			});
		});
	}

	/**
	 * Fetches an access token from the Toon API using the
	 * athom callback service (redirect uri)
	 * @param code
	 * @param redirectUri
	 * @param callback
	 * @private
	 */
	getAccessTokens(code, redirectUri, callback) {

		// Request accessToken
		request.post({
			url: 'https://api.toonapi.com/token',
			rejectUnauthorized: false,
			form: {
				grant_type: 'authorization_code',
				client_id: this.key,
				client_secret: this.secret,
				redirect_uri: redirectUri,
				code: code,
			},
		}, (err, res, body) => {

			// Parse body
			if (body) {
				try {
					body = JSON.parse(body);
				} catch (err) {
					return callback(err, false);
				}
			}

			console.log('node-toon: fetched new access tokens');

			// Store new tokens
			this.accessToken = body.access_token;
			this.refreshToken = body.refresh_token;

			// Emit refreshed event
			this.emit('refreshed', { access_token: this.accessToken, refresh_token: this.refreshToken });

			// Callback new tokens
			callback(err, {
				access_token: body.access_token,
				refresh_token: body.refresh_token,
			});
		});
	}

	/**
	 * Uses the refresh token to fetch a new access token,
	 * stores all new tokens internally
	 * @param callback
	 * @private
	 */
	refreshAccessToken(callback) {

		// Refresh accessToken
		request.post({
			url: 'https://api.toonapi.com/token',
			rejectUnauthorized: false,
			headers: {
				'Content-Type': 'application/x-www-form-urlencoded',
			},
			form: {
				client_secret: this.secret,
				client_id: this.key,
				grant_type: 'refresh_token',
				refresh_token: this.refreshToken,
			},
		}, (err, res, body) => {

			// Parse body
			if (body) {
				try {
					body = JSON.parse(body);
				} catch (err) {
					return callback(err, false);
				}
			}

			// Check for valid input
			if (err || !body || !body.hasOwnProperty('access_token') || !body.hasOwnProperty('refresh_token')) {
				console.error(err || body, 'node-toon: error refreshing tokens');
				if (callback) callback(true, false);
			} else {

				console.log('node-toon: fetched new access tokens');

				// Store new tokens
				this.accessToken = body.access_token || this.accessToken;
				this.refreshToken = body.refresh_token || this.refreshToken;

				// Emit refreshed event
				this.emit('refreshed', { access_token: this.accessToken, refresh_token: this.refreshToken });

				// Callback new tokens
				if (callback) {
					callback(err, {
						access_token: body.access_token,
						refresh_token: body.refresh_token,
					});
				}
			}
		});
	}

	/**
	 * Registers the provided webhook url with the API
	 * to receive updates from Toon.
	 */
	registerPushEvent() {

		// Subscribe to events from toon
		this._basePOST('pushEvent', {
			callbackUrl: this.webhookUrl,
			applicationId: this.key,
		}, (err, result) => {
			if (err) console.error(err, 'pushEvent failed to register');
			else if (result) console.log('pushEvent registered');
		});
	}

	/**
	 * De-register the push event subscription.
	 */
	deregisterPushEvent(callback) {

		console.log('de-register push event subscription');

		// Configure and fire the request
		request({
			url: `${apiBaseUrl}pushEvent?applicationId=${this.key}`,
			method: 'DELETE',
			headers: {
				Authorization: `Bearer ${this.accessToken}`,
			},
		}, (error, response) => {
			if (!error && response.statusCode === 204) {
				console.log('node-toon: de-register push event subscription successful');
				if (callback) callback(null, true);
			} else {
				console.error(error || response.statusCode, 'node-toon: failed to de-register push event subscription');
				if (callback) callback(error || response.statusCode, false);
			}
		});
	}

	/**
	 * Convenience method that provides a basic PUT
	 * to the Toon API
	 * @param command Desired command to be PUT
	 * @param body Data to be updated
	 * @param callback Returns with two parameters, err and success
	 * @private
	 */
	_basePUT(command, body, callback) {

		// Perform the request
		this._performRequest({
			url: `${apiBaseUrl}${command}`,
			method: 'PUT',
			rejectUnauthorized: false,
			headers: {
				authorization: `Bearer ${this.accessToken}`,
				Accept: 'application/json',
			},
			json: body,
		}, callback);
	}

	/**
	 * Convenience method that provides a basic GET
	 * to the Toon API
	 * @param command Desired command to be GET
	 * @param callback Returns with two parameters, err and success
	 * @private
	 */
	_baseGET(command, callback) {

		// Perform the request
		this._performRequest({
			url: `${apiBaseUrl}${command}`,
			method: 'GET',
			rejectUnauthorized: false,
			headers: {
				Authorization: `Bearer ${this.accessToken}`,
				Accept: 'application/json',
			},
		}, callback);
	}

	/**
	 * Convenience method that provides a basic GET
	 * to the Toon API
	 * @param command Desired command to be GET
	 * @param callback Returns with two parameters, err and success
	 * @private
	 */
	_basePOST(command, data, callback) {

		// Perform request
		request({
			url: `${apiBaseUrl}${command}`,
			method: 'POST',
			headers: {
				Authorization: `Bearer ${this.accessToken}`,
				'Content-Type': 'application/json',
			},
			json: data,
		}, (err, result) => {
			if (callback) callback(err, result);
		});
	}

	/**
	 * Convenience method that perfoms a request to
	 * the Toon api, using the options provided in the
	 * parameter options
	 * @param options Request options
	 * @param callback Returns with two parameters, err and result
	 * @private
	 */
	_performRequest(options, callback) {

		// Start the request
		request(options, (error, response, body) => {
			if (!error && response.statusCode === 200) {

				// Parse body
				if (body) {
					try {
						body = JSON.parse(body);
					} catch (err) {
						return callback(err, false);
					}
				}

				if (callback) callback(error, body);
			} else {
				if (callback) callback((error || response.statusCode), response);
			}
		});
	}
}

module.exports = Toon;
