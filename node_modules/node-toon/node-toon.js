var request = require("request");
var querystring = require("querystring");
var btoa = require("btoa");
var https = require("https");

/**
 * Toon constructor, provide the API key and secret
 * @param key Toon API key string
 * @param secret Toon API secret string
 * @constructor
 */
function Toon(key, secret) {
	// Store key and secret for authorization later on
	this.key = key;
	this.secret = secret;

	// Create fields for the access tokens
	this.access_token = null;
	this.refresh_token = null;
};

/**
 * Util function that returns the autorized state of
 * the Toon instance
 * @returns {boolean}
 */
Toon.prototype.authorized = function () {
	return !!this.access_token;
};

/**
 * Queries the Toon API for the display status
 * @param callback Returns with two parameters, err and data
 */
Toon.prototype.getStatus = function (callback) {
	this.baseGET("status", function (err, result) {
		if (callback) callback(err, result.thermostatInfo)
	})
};

/**
 * PUTs to the Toon API to set a new target temperature
 * @param data Object holding a temperature attribute of type integer
 * @param callback Returns with two parameters, err and success
 */
Toon.prototype.setTemperature = function (data, callback) {
	this.basePUT("temperature", {"value": data.temperature}, function (err, result) {
		if (callback) callback(err, result)
	})
};

/**
 * Queries the Toon API for the temperature programs
 * @param callback Returns with two parameters, err and data
 */
Toon.prototype.getTemperaturePrograms = function (callback) {
	this.baseGET("temperature/programs", function (err, result) {
		if (callback) callback(err, result)
	})
};

/**
 * Queries the Toon API for the target temperature
 * @param callback Returns with two parameters, err and target_temperature
 * TODO refactor once GET temperature is implemented in Toon API
 */
Toon.prototype.getTargetTemperature = function (callback) {
	this.baseGET("status", function (err, result) {
		if (callback) callback(err, result.thermostatInfo.currentSetpoint)
	})
};
/**
 * Queries the Toon API for the measured temperature
 * @param callback Returns with two parameters, err and measured_temperature
 * TODO refactor once GET temperature is implemented in Toon API
 */
Toon.prototype.getMeasureTemperature = function (callback) {
	this.baseGET("status", function (err, result) {
		if (callback) callback(err, result.thermostatInfo.currentTemp);
	})
};

var recentAgreements = null;
Toon.prototype.getAgreements = function (callback) {
	this.baseGET("agreements", function (err, result) {
		recentAgreements = result;
		if (callback) callback(err, result);
	});
};

Toon.prototype.setAgreement = function (agreementId, callback) {
	var agreement;
	if (agreementId != null) {
		agreement = {
			agreementId: agreementId
		};
	} else {
		agreement = recentAgreements[0];
	}

	this.basePOST("agreements", agreement, function (err, result) {
		console.log(err);
		console.log(result);
	});
}

/**
 * Starts OAuth2.0 authorization flow with the Toon API
 * @param username
 * @param password
 * @param callback
 * TODO to be properly implemented
 */
Toon.prototype.authorize = function (username, password, callback) {

	// String holding authorization credentials
	var postData = querystring.stringify({
		"username": username,
		"password": password,
		"grant_type": "password"
	});

	// Options for the authorization request
	var options = {
		host: "api.toonapi.com",
		port: 443,
		path: "/token",
		method: "POST",
		"rejectUnauthorized": false,
		headers: {
			"Content-Type": "application/x-www-form-urlencoded",
			"Content-Length": Buffer.byteLength(postData),
			"Authorization": "Basic " + btoa(this.key + ":" + this.secret)
		}
	};

	// Make new token request
	var tokenRequest = https.request(options, function (response) {
		response.setEncoding("utf8");
		var res = '';
		response.on('data', function (chunk) {
			res += chunk;
		});

		response.on('end', function () {
			res = JSON.parse(res);

			if (res.access_token != null) {
				this.access_token = res.access_token;
				this.refresh_token = res.refresh_token;
				console.log("GOT TOKENS:");
				console.log(this.access_token);
				console.log(this.refresh_token);
				if (callback)callback(null, {access_token: res.access_token, refresh_token: res.refresh_token});
			}
			else {
				if (callback)callback(true, null);
			}
		}.bind(this));
	}.bind(this));

	// Handle error
	tokenRequest.on("error", function (e) {
		if (callback)callback(e.message, null);
	});

	tokenRequest.write(postData);
	tokenRequest.end();
};

Toon.prototype.getAccessToken = function (code, redirect_uri, callback) {
	var key = this.key;
	var secret = this.secret;

	// Request access_token
	request.post({
		url: "https://api.toonapi.com/token",
		rejectUnauthorized: false,
		form: {
			"grant_type": "authorization_code",
			"client_id": key,
			"client_secret": secret,
			"redirect_uri": redirect_uri,
			"code": code
		}
	}, callback);
};

Toon.prototype.refreshAccessToken = function (refresh_token, callback) {
	var key = this.key;
	var secret = this.secret;

	// Refresh access_token
	request.post({
		url: "https://api.toonapi.com/token",
		rejectUnauthorized: false,
		form: {
			"grant_type": "refresh_token",
			"client_id": key,
			"client_secret": secret,
			"refresh_token": refresh_token
		}
	}, callback);

}

/**
 * Convenience method that provides a basic PUT
 * to the Toon API
 * @param command Desired command to be PUT
 * @param body Data to be updated
 * @param callback Returns with two parameters, err and success
 */
Toon.prototype.basePUT = function (command, body, callback) {
	// Configure the request
	var options = {
		url: 'https://api.toonapi.com/toon/api/v1/' + command,
		method: 'PUT',
		"rejectUnauthorized": false,
		headers: {
			"authorization": "Bearer " + this.access_token,
			"Accept": "application/json"
		},
		json: body
	};
	performRequest(options, callback);
};

/**
 * Convenience method that provides a basic GET
 * to the Toon API
 * @param command Desired command to be GET
 * @param callback Returns with two parameters, err and success
 */
Toon.prototype.baseGET = function (command, callback) {
	// Configure the request
	var options = {
		url: 'https://api.toonapi.com/toon/api/v1/' + command,
		method: 'GET',
		"rejectUnauthorized": false,
		headers: {
			"Authorization": "Bearer " + this.access_token,
			"Accept": "application/json"
		}
	};
	performRequest(options, callback);
};

/**
 * Convenience method that provides a basic GET
 * to the Toon API
 * @param command Desired command to be GET
 * @param callback Returns with two parameters, err and success
 */
Toon.prototype.basePOST = function (command, data, callback) {
	//// Configure the request
	//var options = {
	//	url: 'https://api.toonapi.com/toon/api/v1/' + command,
	//	method: 'POST',
	//	"rejectUnauthorized": false,
	//	headers: {
	//		"Authorization": "Bearer " + this.access_token,
	//		"Content-Type": "application/json"
	//	},
	//	form: JSON.stringify(data),
	//	body: JSON.stringify(data),
	//	json: JSON.stringify(data)
	//
	//};
	//performRequest(options, callback);

	// fire request
	request({
		url: 'https://api.toonapi.com/toon/api/v1/' + command,
		method: "POST",
		headers: {
			"Authorization": "Bearer " + this.access_token,
			"Content-Type": "application/json"
		},
		json: data
	}, function(err, result) {
		console.log(arguments);
	});
};

/**
 * Convenience method that perfoms a request to
 * the Toon api, using the options provided in the
 * parameter options
 * @param options Request options
 * @param callback Returns with two parameters, err and result
 */
function performRequest(options, callback) {
	// Start the request
	request(options, function (error, response, body) {
		if (!error && response.statusCode == 200) {
			var result = (body) ? JSON.parse(body) : true;
			if (callback) callback(error, result);
		}
		else {
			if (callback) callback((error || response.statusCode), response);
		}
	})
}

module.exports = Toon;
