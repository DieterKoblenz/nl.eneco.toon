'use strict';

var request = require("request");
var EventEmitter = require('events').EventEmitter;

class Toon extends EventEmitter {

	/**
	 * Toon constructor, provide the API key and secret
	 * @constructor
	 */
	constructor(key, secret) {
		super();

		// Store key and secret for authorization later on
		this.key = key;
		this.secret = secret;

		// Defaults
		this.target_temperature = undefined;
		this.measure_temperature = undefined;

		// Create fields for the access tokens
		this.access_token = new Buffer(this.key + ":" + this.secret).toString('base64');
		this.refresh_token = null;

		// Refresh access tokens every 20 minutes
		setInterval(() => {
			console.log("this")
			console.log(this);
			// If once manually authorized
			if (this.refresh_token != null) {
		
				// Fetch new tokens
				this._refreshAccessToken();
			}
		}, 20 * 60 * 1000);

		// Start listening for incoming events // TODO when pushEvent works
		// this._listenForEvents();
	}

	/**
	 * Queries the Toon API for the display status
	 * @param callback Returns with two parameters, err and data
	 */
	getStatus(callback) {
		this._baseGET("status", (err, result) => {
			if (!err && result) {
				if (callback) callback(err, result.thermostatInfo);
			}
			else {
				if (callback) callback(err, false);
			}
		})
	}

	/**
	 * PUTs to the Toon API to set a new target temperature
	 * @param data Object holding a temperature attribute of type integer
	 * @param callback Returns with two parameters, err and success
	 */
	setTargetTemperature(data, callback) {
		this._basePUT("temperature", { "value": data.temperature }, (err, result) => {
			if (callback) callback(err, result)
		})
	}

	/**
	 * Queries the Toon API for the temperature programs
	 * @param callback Returns with two parameters, err and data
	 */
	getTemperaturePrograms(callback) {
		this._baseGET("temperature/programs", (err, result) => {
			if (callback) callback(err, result)
		})
	}

	/**
	 * Returns current target temperature
	 */
	getTargetTemperature() {
		return this.target_temperature;
	}

	/**
	 * Returns current measured temperature
	 */
	getMeasureTemperature() {
		return this.measure_temperature;
	}

	/**
	 * Queries the Toon API for the temperature programs
	 * @param callback Returns with two parameters, err and data
	 */
	getConsumptionElectricity(callback) {
		this._baseGET("consumption/electricity/data*", (err, result) => {
			if (callback) callback(err, result)
		})
	}

	/**
	 * Queries the Toon API for the temperature programs
	 * @param callback Returns with two parameters, err and data
	 */
	getConsumptionGas(callback) {
		this._baseGET("consumption/gas/data*", (err, result) => {
			if (callback) callback(err, result)
		})
	}

	/**
	 * Fetches all agreements from the API, if there are more
	 * than one, the user may choose one
	 * @param callback
	 */
	getAgreements(callback) {
		this._baseGET("agreements", (err, result) => {
			this.recentAgreements = result;
			if (callback) callback(err, result);
		});
	}

	/**
	 * Selects an agreement (device?) and registers it to this
	 * toon object, this is a connection to the device
	 * @param agreementId
	 * @param callback
	 */
	setAgreement(agreementId, callback) {

		// Either use parameter agreement
		let agreement;
		if (agreementId != null) {
			agreement = {
				agreementId: agreementId
			};
		}
		else {
			// Or use the most recent agreement
			agreement = this.recentAgreements[0];
		}

		// Make the request to set agreement
		this._basePOST("agreements", agreement, (err, result) => {

			// Check for updated target temperature
			this.getStatus((err2, result2) => {

				// Store target/measure temperature
				this.target_temperature = result2.currentSetpoint / 100;
				this.measure_temperature = result2.currentTemp / 100;

				// Agreements done
				if (callback) callback(err, result);
			});
		});
	}

	/**
	 * Fetches an access token from the Toon API using the
	 * athom callback service (redirect uri)
	 * @param code
	 * @param redirect_uri
	 * @param callback
	 * @private
	 */
	getAccessTokens(code, redirect_uri, callback) {
		let key = this.key;
		let secret = this.secret;

		// Request access_token
		request.post({
			url: "https://api.toonapi.com/token",
			rejectUnauthorized: false,
			form: {
				"grant_type": "authorization_code",
				"client_id": key,
				"client_secret": secret,
				"redirect_uri": redirect_uri,
				"code": code
			}
		}, (err, res, body) => {

			// Store new tokens
			this.access_token = JSON.parse(body).access_token;
			this.refresh_token = JSON.parse(body).refresh_token;

			// Callback new tokens
			callback(err, {
				access_token: JSON.parse(body).access_token,
				refresh_token: JSON.parse(body).refresh_token
			});
		});
	}

	/**
	 * Uses the refresh token to fetch a new access token,
	 * stores all new tokens internally
	 * @param callback
	 * @private
	 */
	_refreshAccessToken(callback) {
		let refresh_token = this.refresh_token;

		// Refresh access_token
		request.post({
			url: "https://api.toonapi.com/token",
			rejectUnauthorized: false,
			headers: {
				"Authorization": "Bearer " + new Buffer(this.key + ":" + this.secret).toString('base64')
			},
			form: {
				"grant_type": "refresh_token",
				"refresh_token": refresh_token
			}
		}, (err, res, body) => {

			// Store new tokens
			this.access_token = JSON.parse(body).access_token || this.access_token;
			this.refresh_token = JSON.parse(body).refresh_token || this.refresh_token;

			// Callback new tokens
			if (callback) callback(err, {
				access_token: JSON.parse(body).access_token,
				refresh_token: JSON.parse(body).refresh_token
			});
		});
	}

	/**
	 * Convenience method that provides a basic PUT
	 * to the Toon API
	 * @param command Desired command to be PUT
	 * @param body Data to be updated
	 * @param callback Returns with two parameters, err and success
	 * @private
	 */
	_basePUT(command, body, callback) {
		
		// Configure the request
		var options = {
			url: 'https://api.toonapi.com/toon/api/v1/' + command,
			method: 'PUT',
			"rejectUnauthorized": false,
			headers: {
				"authorization": "Bearer " + this.access_token,
				"Accept": "application/json"
			},
			json: body
		};

		// Perform the request
		this._performRequest(options, callback);
	}

	/**
	 * Convenience method that provides a basic GET
	 * to the Toon API
	 * @param command Desired command to be GET
	 * @param callback Returns with two parameters, err and success
	 * @private
	 */
	_baseGET(command, callback) {

		// Configure the request
		var options = {
			url: 'https://api.toonapi.com/toon/api/v1/' + command,
			method: 'GET',
			"rejectUnauthorized": false,
			headers: {
				"Authorization": "Bearer " + this.access_token,
				"Accept": "application/json"
			}
		};

		// Perform the request
		this._performRequest(options, callback);
	}

	/**
	 * Convenience method that provides a basic GET
	 * to the Toon API
	 * @param command Desired command to be GET
	 * @param callback Returns with two parameters, err and success
	 * @private
	 */
	_basePOST(command, data, callback) {

		// Perform request
		request({
			url: 'https://api.toonapi.com/toon/api/v1/' + command,
			method: "POST",
			headers: {
				"Authorization": "Bearer " + this.access_token,
				"Content-Type": "application/json"
			},
			json: data
		}, (err, result) => {
			if (callback) callback(err, result);
		});
	}

	/**
	 * Convenience method that perfoms a request to
	 * the Toon api, using the options provided in the
	 * parameter options
	 * @param options Request options
	 * @param callback Returns with two parameters, err and result
	 * @private
	 */
	_performRequest(options, callback) {

		// Start the request
		request(options, (error, response, body) => {
			if (!error && response.statusCode == 200) {
				var result = (body) ? JSON.parse(body) : true;
				if (callback) callback(error, result);
			}
			else {
				if (callback) callback((error || response.statusCode), response);
			}
		});
	}

	_listenForEvents() {
		return new Promise((resolve, reject) => {

			// Register webhook
			Homey.manager('cloud').registerWebhook(Homey.env.TOON_WEBHOOK_ID, Homey.env.TOON_WEBHOOK_SECRET, {}, (err, args) => {
					//TODO handle incoming event with updated data store it in this
					console.log(arguments);
				},
				(err, result) => {
					console.log(arguments);
					if (err) reject(err);
					else if (result) {

						// Subscribe to events from toon
						this._basePOST("pushEvent", {
							"callbackUrl": Homey.env.TOON_WEBHOOK_URL,
							"applicationId": Homey.env.TOON_KEY
						}, function (err, result) {
							console.log("pushEvent registered");
							console.log(arguments);
						});

						resolve()
					}
				});
		})
	}
}

module.exports = Toon;
